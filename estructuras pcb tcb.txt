typedef enum{
	N,  // NEW
	R,	// READY
	E,	// EXEC
	B	// BREAK interrumpido
}estado;

typedef struct{
	uint32_t pid;  // ID PATOTA
	uint32_t tareas; // DIR. LOGICA INCIO DE TAREAS
}pcbPatota;

typedef struct{
	uint32_t tid;
	char estado;
	uint32_t posicionX;
	uint32_t posicionY;
	uint32_t prox_instruccion; // Identificador de la pr贸xima instrucci贸n a ejecutar
	uint32_t puntero_pcb; //Direcci贸n l贸gica del PCB del tripulante
}tcbTripulante;


void mostrarTripulante(tcbTripulante tripulante,pcbPatota patota){
	printf("ID %d \n",tripulante.tid);
	printf("posicion x: %d \n",tripulante.posicionX);
	printf("posicion y: %d \n",tripulante.posicionY);
	printf("Status: %c \n",tripulante.estado);
	printf("n patota: %d \n",patota.pid);
}

tcbTripulante* crearTCB(nuevoTripulante tripulanteN){
	tcbTripulante* tripulante=malloc(sizeof(tcbTripulante));
	tripulante->tid=tripulanteN.id;
	tripulante->estado='N';
	tripulante->posicionX=tripulanteN.posicionX;
	tripulante->posicionY=tripulanteN.posicionY;
	tripulante->puntero_pcb=0;
	tripulante->prox_instruccion=0;
	return tripulante;

}
pcbPatota* crearPCB(nuevoTripulante tripulanteN){
	pcbPatota* patota=malloc(sizeof(pcbPatota));
	patota->pid= tripulanteN.numeroPatota;
	patota->tareas=0;
	return patota;
}
